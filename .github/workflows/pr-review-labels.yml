name: Label PR review outcome

on:
  pull_request_review:
    types: [submitted]

jobs:
  update-labels:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Update label based on review state
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reviewState = context.payload.review.state.toLowerCase();
            const prNumber = context.payload.pull_request.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            // Define label logic based on the review state
            const labelsToApply = {
              approved: { add: 'approved', remove: ['changes-requested', 'needs-review'] },
              changes_requested: { add: 'changes-requested', remove: ['approved', 'needs-review'] },
              commented: { add: 'needs-review', remove: ['approved', 'changes-requested'] },
              pending: { add: 'needs-review', remove: ['approved', 'changes-requested'] },
              dismissed: { add: null, remove: ['approved', 'changes-requested', 'needs-review'] }
            };

            const labelAction = labelsToApply[reviewState];
            if (!labelAction) return;

            for (const label of labelAction.remove) {
              if (label) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: prNumber,
                    name: label,
                  });
                } catch (error) {
                  if (error.status !== 404) throw error;
                }
              }
            }

            if (labelAction.add) {
              await github.rest.issues.addLabels({
                owner: repoOwner,
                repo: repoName,
                issue_number: prNumber,
                labels: [labelAction.add],
              });
            }
